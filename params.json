{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-755321-7","tagline":"This is a titanium MVC framework, and the CB just mean my website Code Blog :)","body":"# CBMVC - A MVC Framework for Titanium SDK\r\n\r\n## Overview\r\n***\r\nThis is a mvc frameork for Titanium. The CB is mean CodeBlog, this is my website(www.coderblog.in).\r\nand it's base on silver https://github.com/tanin47/silver. But I have added and improved a lot of it :)\r\n\r\nThe example project here shows you how to build navigate betweens pages (with animation), and how to build Facebook-alike menu.\r\n\r\nwith this framework, please update your titanium sdk to 2.0.1 or above.\r\n\r\n1. Life cycle:\r\n------------------------------------------\r\n\tLaunch app ==>  home view ==>  home controller\r\n\r\n2. How to setup a controller:\r\n------------------------------------------\r\nYour controller must be in /Resources/app/controller, and the corresponding view must be in Resources/app/views.\r\nA controller and its corresponding view should have identical name.\r\n\r\nFor example:\r\n\r\n\t/Resources/app/controllers/home.js\r\n\t/Resources/app/views/home.js\r\n\r\n\r\nMoreover, you need to add the controller's name into CB.Launch when launch the app\r\nIn app.js, it should look like this:\r\n\r\n\r\n\t//load the controllers, the main controller must be the last one\r\n\tVar controllers = ['home','login','mainFrame'];\r\n\tCB.Launch(controllers);\r\n\r\n\r\n3. How to write a controller:\r\n------------------------------------------\r\nplease refer to the object __exports.\r\nIf you declare ```__exports.some_function```, then the controller will have some_function method.\r\nWe also have a life-cycle for a controller, you can declare these methods:\r\n\r\n\t__exports.viewLoaded = function(e) { ... };\r\n\t\r\n\t__exports.viewWillAppear = function(e) { ... };\r\n\t__exports.viewDidAppear = function(e) { ... };\r\n\t__exports.viewWillDisappear = function(e) { ... };\r\n\t__exports.viewDidDisappear = function(e) { ... };\r\n\tThe methods' names are self-explanatory.\r\n\r\n\r\n4. How to switch between controllers:\r\n------------------------------------------\r\na. Go to next view : \r\n You can call the following method to switch next view, and set the animation:\r\nCB.pushController = function(controller, animate);\r\nFor example:\r\n\r\n\t//switch to the login view and use ‘left’ animation\r\n\tCB.pushController(CB.controllers.login,’left’);\r\n\r\nb. Go to home view : \r\n You can call the following method to switch home view, and set the animation:\r\nFor example:\r\n\r\n\t//go to the home view and use ‘right’ animation\r\n\tCB.Launch(null, null, 'right');\r\n\t\r\n\t//or just refresh a view without animation\r\n\tCB.Launch('home', true, 'none');\r\n\r\n\r\nc. Back to previous view : \r\n You can call the following method to back the previous view:\r\nFor example:\r\n\r\n\t//just back to previous view\r\n\tCB.popController();\r\n\r\n\r\nd. About the animation:\r\n\r\nnone without animation\r\n*\tleft or don't set it, for move to left animation\r\n*\tright: for move to right animation, default move to left\r\n*\tup: for move to up animation, default move to left\r\n*\tdown: for move to down animation, default move to left\r\n\r\n5. How to handle data and event:\r\n------------------------------------------\r\nYou can add the layout element(etc. view button) in the view page, and add the event listener in controller.\r\nFor example:\r\n\r\nHome view (/Resources/app/view/home.js):\r\n\r\n\t//create the base view\r\n\tvar view = Ti.UI.createView({\r\n\t\twidth : '100%,\r\n\t\theight : '100%',\r\n\t\tbackgroundImage : CB.ApplicationDirectory + 'images/bg.png'\r\n\t});\r\n\t\r\n\t//create the button with the view\r\n\tview.memberLoginBtn = Ti.UI.createButton({\r\n\t\tleft : 0,\r\n\t\ttop : '74%',\r\n\t\twidth : '100%',\r\n\t\theight : '12%',\r\n\t\ttitle : '  Member Login',\r\n\t\tcolor : 'red',\r\n\t\ttextAlign : 'left',\r\n\t\tfont : {\r\n\t\t\tfontSize : '18dp',\r\n\t\t\tfontWeight : 'bold'\r\n\t\t},\r\n\t\tbackgroundImage : CB.ApplicationDirectory + 'images/memLogin.png'\t\t\r\n\t});\r\n\t\r\n\t//add the button into the view\r\n\tview.add(view.memberLoginBtn);\r\n\r\n\r\nHome controller  (/Resources/app/controller/home.js):\r\n\r\n\t//the init events must be added to  __exports.viewLoaded\r\n\t__exports.viewLoaded = function() {\r\n\t\tthis.view.memberLoginBtn.addEventListener('click', function() {\r\n\t\t\t//pass data to next controller\r\n\t\t\tCB.controllers.login.data = 'test';\r\n\t\t\tCB.pushController(CB.controllers.login);\r\n\t\t});\r\n\t};\r\n\r\n\r\nGet data within login controller  (/Resources/app/controller/login.js):\r\n\r\n\t//Must be use viewWillAppear or viewDidAppear to get data and show it\r\n\t__exports.viewWillAppear = function(e) {\r\n\t\t//check the data whether is available\r\n\t\tif(e != undefined && e.data != undefined){\r\n\t\t\t//set the data to view's element\r\n\t\t\tthis.view.loginLabel.text = e.data;\r\n\t\t}\r\n\t}\r\n\r\n\r\n6. How to set styles to the element:\r\n------------------------------------------\r\nYou can set an element’s style with CB.Styles namespace, add the style’s code in ```/Resources/app/base/styles.js```\r\n\r\nFor the better, create a difference namespace for each view’s style:\r\nFor example, add a style for home view:\r\n\r\n\r\n\tStyles (/Resources/app/base/style.js):\r\n\t (function() {\r\n\t\t/**\r\n\t\t * home view's styles\r\n\t\t */\r\n\t\tCB.Styles.home = {\r\n\t\t\tbaseView : {\r\n\t\t\t\twidth : CB.Styles.screenWidth,\r\n\t\t\t\theight : CB.Styles.screenHeight,\r\n\t\t\t\tbackgroundImage : CB.ApplicationDirectory + 'images/bg.png'\r\n\t\t\t},\r\n\t\t\tgoBtn : {\r\n\t\t\t\ttop : '50%',\r\n\t\t\t\theight : '6%',\r\n\t\t\t\tfont : {\r\n\t\t\t\t\tfontSize : '17dp',\r\n\t\t\t\t\tfontWeight : 'bold'\r\n\t\t\t\t},\r\n\t\t\t\ttitle: 'Go Next'\r\n\t\t\t},\r\n\t\t\tswitchLangBtn : {\r\n\t\t\t\ttop : '30%',\r\n\t\t\t\theight : '6%',\r\n\t\t\t\tfont : {\r\n\t\t\t\t\tfontSize : '17dp',\r\n\t\t\t\t\tfontWeight : 'bold'\r\n\t\t\t\t},\r\n\t\t\t\ttitle: CB.Util.L('switchLang')\r\n\t\t\t}\r\n\t\t}\r\n\t})();\r\n\r\n\r\nIn the home view , can use styles to create the elements now:\r\n\r\nHome view (/Resources/app/view/home.js):\r\n\r\n\r\n\t__exports = (function() {\r\n\t\t//set the views's name\r\n\t\tvar viewName = 'home';\r\n\t\t//create element and set style with CB.Styles\r\n\t\tvar view = Ti.UI.createView(CB.Styles[viewName].baseView);\r\n\t\tview.name = viewName; //just for add the refresh debug button\r\n\t\t\r\n\t\tview.goBtn = Ti.UI.createButton(CB.Styles[view.name].goBtn);\r\n\t\tview.add(view.goBtn);\r\n\t\t\r\n\t\tview.switchLangBtn = Ti.UI.createButton(CB.Styles[view.name].switchLangBtn);\r\n\t\tview.add(view.switchLangBtn);\r\n\t\t\r\n\t\treturn view;\r\n\t})();\r\n\r\n\t\r\nAlso you can add some logic for handle different style(just like debug mode or cross platform logic), please refer to the /Resources/app/view/home.js file.\r\n\r\n7. How to debug the app:\r\n------------------------------------------\r\nYou can use CB.Debug for echo the debug message, there are 3 methods for debugger:\r\n\r\nEcho a debug  message string:\r\n\t\r\n\t/**\r\n\t * General echo the debug message\r\n\t * @param {String} s, echo which debug message\r\n\t * @param {int} line, the line of echo message\r\n\t * @param {String} page, the page  which debug message show\r\n\t * @param {String} type, debug type, support Titanium debug type:\r\n\t *\t\t info: display message with [INFO] style in console\t\r\n\t * \t\t warn: display message with [WARN] style in console (default)\r\n\t *\t\t error: display message with [ERROR] style in console\r\n\t */\r\n\tCB.Debug.echo(s, line, page, type)\r\n\t\r\n\t//for example:\r\n\tCB.Debug.echo('Debug message, testing',33,'login controller',’warn’);\r\n\t\r\n\t//or just show the debug message in line 33\r\n\tCB.Debug.echo('Debug message, testing',33);\r\n\r\n\r\nDump an object(JSON format) \r\n\r\n\t/**\r\n\t * General dump the object\r\n\t * @param {Object} o, dump object\r\n\t * @param {int} line, the line of debug object\r\n\t * @param {String} page, the page  which debug message show\r\n\t * @param {String} type, debug type, support Titanium debug type:\r\n\t *\t\t info: display message with [INFO] style in console \r\n\t * \t\t warn: display message with [WARN] style in console (default)\r\n\t *\t\t error: display message with [ERROR] style in console\r\n\t */\r\n\tfunction dump(o, line, page, type)\r\n\t\r\n\t//for example:\r\n\tCB.Debug.dump(this.view,10,'login controller','info');\r\n\t\r\n\t//or just dump the object in line 10\r\n\tCB.Debug.dump(this.view,33);\r\n\r\n\r\nAdd a refresh function to the top bar\r\n\r\n\t/**\r\n\t * Add a refresh function to top bar, then you can click the top bar to refresh the page \r\n\t * just for review the layout changed and testing without re-launch the app.\r\n\t * @param {Object} coreObj\r\n\t * @param {Object} view\r\n\t */\r\n\tfunction addRefreshBtn(coreObj, view)\r\n\t\r\n\t//for example, add the button before view appear \r\n\t__exports.viewWillAppear = function(e) {\r\n\t\t//add a refresh button for testing layout\r\n\t\tCB.Debug.addRefreshBtn(CB, e.view);\r\n\t};\r\n\r\n\r\n8. How to use ajax request:\r\n------------------------------------------\r\nYou need to set the remote server url for ajax in the following aip.js file at first:\r\n\r\nAPI (/Resources/app/base/api.js):\r\n\r\n\t/**\r\n\t * set the remote API\r\n\t */\r\n\tCB.API = {\r\n\t\tserver : 'http://www.coderblog.in/'\r\n\t};\r\n\t\r\n\t(function(){\r\n\t\t\r\n\t\tCB.Platform.extend(CB.API, {\r\n\t\t\t//set each api function's url\r\n\t\t\tlogin : CB.API.server + 'api/login.aspx'\r\n\t\t\tinfo : CB.API.server + 'api/info.aspx',\r\n\t\t});\r\n\t\t\r\n\t})();\r\n\r\n\r\nGet remote API data and redirect to next view:\r\n\r\nCall getRemoteData function (/Resources/app/base/common.js):\r\n\r\n\t/**\r\n\t * Get date with remote API function\r\n\t * @param {String} api, the API's name \r\n\t * @param {Object} controller, which controller need to show after got data\r\n\t * @param {Boolean} saveData, save response data to local storage or just pass data to next view\r\n\t * \t'true', save in local storage\r\n\t * \t'false', just pass data to controller.model to next view (default)\r\n\t * @param {String} animate\r\n\t */ getRemoteData : function(api, controller, animate)\r\n\t\r\n\t//get the user info with info api and redirect to service category view\r\n\tCB.Common.getRemoteData('info', CB.controllers.serviceCategory);\r\n\r\n\r\nafter that, you can access the user info data within service category controller :\r\n\r\nHandle Ajax Callback (/Resources/app/controllers/serviceCategory.js):\r\n\r\n\t//get user info within controller in __exports.viewWillAppear event\r\n\t__exports.viewWillAppear = function(e) {\t\r\n\t     //get data from controller.model \t\r\n\t    if(e != undefined && e.model != undefined){\r\n\t\te.view.barTitle.text = CB.Util.L('hi') + e.model.first_name + ' ' + e.model.last_name;\r\n\t}\r\n\t\r\n\t//or get date from local storage with api name\r\n\tvar userInfo = CB.Util.loadObject('info');\t\r\n\tif(userInfo != null){\r\n\t\te.view.barTitle.text = CB.Util.L('hi') + userInfo.first_name + ' ' + userInfo.last_name;\r\n\t}\r\n\t    ...\r\n\r\n\t\t\r\n9. How to localization:\r\n------------------------------------------\r\nThe framework can support multiple language, and can be effective immediately after changed the language:\r\n\r\na. Create a language xml file under /Resources/app/languages/ folder, and please follow the following file name format :\r\n\r\nlang.xml\r\n\r\n\t//for example, English should be use\r\n\t/Resources/app/languages/en.xml\r\n\t\r\n\t//Chinese should be use\r\n\t/Resources/app/languages/cn.xml\r\n\r\n\r\nand in the  xml language file, must be use the following format:\r\n\r\n/Resources/app/languages/en.xml\r\n\r\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\t<root>\r\n\t<string id=\"logo\">Welcome to Coder Blog!</string>\r\n\t<string id=\"switchLang\">Switch to Chinese</string>\r\n\t</root>\r\n\r\n\r\nAfter that, you can use the following to display the language with the key:\r\n\tCB.Util.L('logo');\r\n\r\nb. Switch language: \r\nYou can just call the following method to switch the language, after you do that, need to call :\r\n\r\n\tCB.Util.switchLang('en');\r\n\r\nafter you do that, need to call the following method to refresh the page, so that you can see the changed language:\r\n\r\n//refresh the page after changed the language\r\n\tCB.Launch('home', true, ’down’);\r\n\r\n\r\nc. Also you can set the default language with first launch the app:\r\n/Resources/app.js\r\n\r\n\t//set the default language with the app\r\n\tCB.DefaultLang = 'en';\r\n\r\nLicense\r\n------------------------------------------\r\n\r\nMIT License http://www.opensource.org/licenses/mit-license.php\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \r\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \r\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) \r\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, \r\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n","name":"Cbmvc-framework-with-titanium"}